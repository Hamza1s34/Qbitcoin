name: Publish to PyPI

on:
  push:
    branches: [ main, master ]
  release:
    types: [published]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version detection
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Auto-increment version
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        
        # Update version in pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Set environment variable for later steps
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to PyPI..."
        twine upload dist/* --skip-existing --verbose
    
    - name: Commit version changes
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "Auto-increment version to $NEW_VERSION [skip ci]" || exit 0
        git push origin HEAD:${{ github.ref_name }}
    
    - name: Create Git tag
      if: github.event_name == 'push'
      run: |
        git tag "v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
