name: Auto-Publish on Commit

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
      - '*.md'

permissions:
  contents: write
  
jobs:
  auto-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake pkg-config libssl-dev libffi-dev python3-dev git \
          autoconf libtool libboost-all-dev libgmp-dev libmpfr-dev libmpc-dev \
          libboost-system-dev libboost-thread-dev libboost-chrono-dev \
          libboost-program-options-dev libboost-test-dev libboost-filesystem-dev \
          libeigen3-dev libsodium-dev libhwloc-dev gcc-multilib g++-multilib \
          libc6-dev linux-libc-dev wget curl unzip tar gzip swig
          
    - name: Run Smart Installer
      run: |
        echo "üöÄ Running Qbitcoin Smart Installer..."
        python test_smart_installer.py
    
    - name: Generate incremental version
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
        echo "Current version: $CURRENT_VERSION"
        
        # Split current version and increment patch
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        
        # Update version in pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi }}
      run: twine upload dist/*
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if git diff --quiet pyproject.toml; then
          echo "No version changes to commit"
          exit 0
        fi
        
        git add pyproject.toml
        git commit -m "Auto-increment version to $NEW_VERSION [skip ci]"
        
        # Try to push, but don't fail the job if it doesn't work
        if ! git push; then
          echo "‚ö†Ô∏è Could not push version update - continuing anyway"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
