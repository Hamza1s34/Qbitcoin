name: Simple Publish to PyPI

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        pip install -r requirements.txt
    
    - name: Get current version
      id: version
      run: |
        version=$(python -c "from qbitcoin.version import __version__; print(__version__)")
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Current version: $version"
    
    - name: Check if version exists on PyPI
      id: check
      run: |
        version=${{ steps.version.outputs.version }}
        if curl -f -s https://pypi.org/pypi/qbitcoin/$version/json > /dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version $version exists on PyPI"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Version $version does not exist on PyPI"
        fi
    
    - name: Bump version if needed
      if: steps.check.outputs.exists == 'true'
      run: |
        echo "Bumping version..."
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        python version_manager.py --bump patch
        git add .
        git commit -m "Auto-bump version" || true
    
    - name: Build package
      run: |
        rm -rf dist/
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose
    
    - name: Push changes
      if: steps.check.outputs.exists == 'true'
      run: |
        git push || echo "Failed to push changes"
    
    - name: Create and push tag
      run: |
        version=$(python -c "from qbitcoin.version import __version__; print(__version__)")
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git tag -f "v$version"
        git push origin "v$version" --force || echo "Failed to push tag"
